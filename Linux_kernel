Linux内核驱动开发用到的内核函数

Init涉及的函数

使用register_chrdev注册字符设备
int register_chrdev(unsigned int major, const char *name, structfile_operations *fops);
其中参数major如果等于0，则表示采用系统动态分配的主设备号；不为0，则表示静态注册。第一个参数是主设备号，0代表动态分配，这里的MEM_MAJOR是1。第二个参数是设备的名字，第三个参数是文件操作指针。

int register_chrdev_region(dev_t from, unsigned count, const char *name)
from :要分配的设备编号范围的初始值(次设备号常设为0);
Count:连续编号范围.
name:编号相关联的设备名称. (/proc/devices);
ret = register_chrdev_region(devno,NUMBER_OF_DEVICES,"chrdev");

spidev_class = class_create(THIS_MODULE, "spidev");	//创建设备类spidev_class
struct class *class_create(struct module *owner, const char *name)
    class_create - create a struct class structure
    @owner: pointer to the module that is to "own" this struct class
@name: pointer to a string for the name of this class.

struct class_device *class_device_create(struct class        *cls,
                                         struct class_device *parent,
                                         dev_t               devt,
                                         struct device       *device,
                                         const char          *fmt, ...)

    class_device_create - creates a class device and registers it with sysfs
    @cls: pointer to the struct class that this device should be registered to.
    @parent: pointer to the parent struct class_device of this new device, if any.
    @devt: the dev_t for the char device to be added.
    @device: a pointer to a struct device that is assiociated with this class device.
    @fmt: string for the class device's name

status = spi_register_driver(&spidev_spi_driver);//注册spi设备驱动spidev_spi_driver
定义在drivers/spi/spi.c: 
函数原型：int spi_register_driver(struct spi_driver *sdrv)；
参数是spi_driver的结构体；返回值是int型
/**
 * spi_register_driver - register a SPI driver
 * @sdrv: the driver to register
 * Context: can sleep
 */
int spi_register_driver(struct spi_driver *sdrv)
{
        sdrv->driver.bus = &spi_bus_type;
        if (sdrv->probe)
                sdrv->driver.probe = spi_drv_probe;
        if (sdrv->remove)
                sdrv->driver.remove = spi_drv_remove;
        if (sdrv->shutdown)
                sdrv->driver.shutdown = spi_drv_shutdown;
        return driver_register(&sdrv->driver);
}

driver_register
函数原型：int driver_register(struct device_driver *drv)；
参数是device_driver结构体，返回值是int型

device_register定义在drivers/base/core.c
函数原型：int device_register(struct device *dev)；
参数是device的结构体，返回值是int型
int device_register(struct device *dev)
{
    device_initialize(dev);                 //初始化设备
    return device_add(dev);              //添加设备
}


//主设备号和次设备号
devno = MKDEV(HELLO_MAJOR,HELLO_MINOR);


ret = alloc_chrdev_region(&devno, 0, NUMBER_OF_DEVICES, "chrdev");
int alloc_chrdev_region(dev_t *dev,unsigned int firstminor,unsigned int count,char *name);
firstminor是请求的最小的次编号；
count是请求的连续设备编号的总数；
name为设备名，返回值小于0表示分配失败。
然后通过major=MMOR(dev)获取主设备号

//函数功能在/dev目录下自动创建名为chrdev的设备节点
device_create(hello_class, NULL, devno, NULL, "chrdev");

//cdev结构体和file_operations结构体关联的函数  
cdev_init(&cdev, &hello_fops);

cdev.owner = THIS_MODULE;

cdev_add(&cdev, devno, NUMBER_OF_DEVICES);

/*注册总线 */
ret = bus_register(&my_bus_type);

bus_create_file(&my_bus_type, &bus_attr_version)

ret = device_register(&my_bus);

dev_set_name(&my_dev, "my_dev");

/*注册设备*/
device_register(&my_dev);

/*创建属性文件*/
device_create_file(&my_dev, &dev_attr_dev);

/*注册驱动*/
driver_register(&my_driver);

/*创建属性文件*/
driver_create_file(&my_driver, &driver_attr_drv);

在内核中动态开辟内存
void *kmalloc(size_t size, int flags);
size：要分配内存的大小
flags：分配标志，以几个方式控制kmalloc的行为

exit里面的函数

cdev_del(&cdev);

device_destroy(hello_class,devno);

class_destroy(hello_class);

unregister_chrdev_region(devno,NUMBER_OF_DEVICES);


重要的结构体：
struct class *hello_class;

static struct cdev cdev;

dev_t devno;

static const struct file_operations hello_fops = {
        .open = hello_open,
        .read = hello_read,
        .owner = THIS_MODULE,
};


